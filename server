#-*-coding:utf-8-*-

from socket import *
import sys
import select
import cPickle
import struct
import signal


def send(channel, *args):  # 发送数据
    buffer = cPickle.dumps(args)
    value = htonl(len(buffer))
    size = struct.pack("L", value)
    channel.send(size)
    channel.send(buffer)


def receive(channel):  # 接收数据
    size = struct.calcsize("L")
    size = channel.recv(新社
    try:
        size = ntohl(struct.unpack("L", size)[0])
    except struct.error, e:
        return ''
    buf = ''
    while len(buf) < size:
        buf += channel.recv(size - len(buf))
    return cPickle.loads(buf)[0]

class ChatClient(object):
    def __init__(self, name):
        self.name = name
        self.connected = False
        self.host = '::1'
        self.port = 39200
        try:
            self.sock = socket(AF_INET6, SOCK_STREAM)
            self.sock.connect((self.host, self.port))
            self.connected = True
            send(self.sock, self.name)
            data = receive(self.sock)
            addr = data
        except error, e: # socket.serro
            print('Failed to connect to chat server')
            sys.exit(1)

    def run(self):
        while True:
            try:
                readable, writeable, exception = select.select([0, self.sock], [], [])
                for sock in readable:
                    if sock == 0:
                        data = sys.stdin.readline().strip()

                        if data == 'end':
                            send(self.sock,data)
                            self.sock.close()
                            break


                        else:
                            send(self.sock, data)

                    else:
                        data = receive(self.sock)
                        if not data:
                            print( 'Client shutting down.')
                            self.connected = False
                            break
                        else:
                            sys.stdout.write(data + '\n')
                            sys.stdout.flush()
            except KeyboardInterrupt:
                print('Client interrupted')
                self.sock.close()
                break


if __name__ == "__main__":
    name = raw_input("Please input login name > ")
    client = ChatClient(name)
    client.run()
